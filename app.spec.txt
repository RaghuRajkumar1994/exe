# -*- mode: python ; coding: utf-8 -*-
import os
import sys

# Get the path to the current directory where the script is located
here = os.path.dirname(os.path.abspath(__file__))

# 1. Define the analysis part for your main script
a = Analysis(
    ['server.py'],
    pathex=[here],
    hiddenimports=[
        # Common hidden imports for flask/socketio
        'eventlet.hubs.kqueue', 
        'eventlet.hubs.epoll',
        'eventlet.hubs.poll', 
        'eventlet.hubs.select',
        'eventlet.hubs.pyev',
        'eventlet.hubs.iocp',
        'eventlet.hubs.twisted',
    ],
    hookspath=[],
    runtime_hooks=[],
    datas=[
        # Include your HTML template files
        ('worker.html', '.'),
        ('dashboard.html', '.'),
    ],
    binaries=[],
    collect_all=None,
    collect_none=[],
    # Add common Flask/SocketIO dependencies
    collect_data=['flask_socketio', 'flask', 'pandas'], 
    collect_submodules=[],
    specfile_dir=here,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

# 2. Define the PYZ (Python Zipped) part
pyz = PYZ(a.pure, a.zipped_data,
          cipher=None)

# 3. Define the EXE part
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='live_production_server', # Name of the final executable
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True, # Keep this True for a command-line interface
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    cipher=None,
    icon=None, # You can add a path to a .ico file here
)